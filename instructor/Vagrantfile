# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure('2') do |config|
  # it is important that the name of this box is "default"
  config.vm.define :default do |vagrant_host|
    # Box name
    vagrant_host.vm.box = 'rhel-atomic-7'
    vagrant_host.vm.hostname = "rhel-atomic-7-docker-host"

    config.vm.provider "virtualbox" do |virtualbox|
      virtualbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
      virtualbox.memory = 2048
    end

    config.vm.provider :libvirt do |libvirt|
      libvirt.memory = 8192
      libvirt.cpus = 4
    end

    config.vm.synced_folder './', '/vagrant', type: 'rsync', disabled: true
    config.vm.synced_folder './', '/mnt/vagrant', type: 'rsync'
    config.vm.synced_folder '../registry', '/home/vagrant/store', type: 'rsync'
    #config.vm.synced_folder '../', '/mnt/lab', type: 'rsync'
    config.nfs.functional = false

    vagrant_host.vm.provision 'shell', inline: "sudo systemctl stop docker > /dev/null 2>&1 || :" #in case this isn't first run
    vagrant_host.vm.provision 'shell', inline: "sudo groupadd docker > /dev/null 2>&1 || : "
    vagrant_host.vm.provision 'shell', inline: "sudo usermod -a -G docker vagrant"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"
    vagrant_host.vm.provision 'shell', inline: "sudo chown root:docker /var/run/docker.sock"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"

    # Lab Registry additions (to CDK)
    # make sure that the Red Hat internal DNS is registered
    # Not needed if the server is runing in Red Hat network and have Red Hat DNS already enabled.
    # vagrant_host.vm.provision 'shell', inline: "sudo nmcli con mod 'System eth0' ipv4.ignore-auto-dns yes && sudo nmcli con mod 'System eth0' ipv4.dns '10.5.30.160 10.11.5.19 8.8.8.8' && sudo nmcli con up 'System eth0'"

    # start Kubernetes
    vagrant_host.vm.provision 'shell', inline: "sudo sed -i \"s/allow_privileged=false/allow_privileged=true/g\" /etc/kubernetes/config"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable etcd && sudo systemctl start etcd"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-apiserver && sudo systemctl start kube-apiserver"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-controller-manager && sudo systemctl start kube-controller-manager"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-scheduler && sudo systemctl start kube-scheduler"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-proxy.service && sudo systemctl start kube-proxy.service"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kubelet.service && sudo systemctl start kubelet.service"

    # allow access to CE (Kev's team) repo, to pull registry-ui
    vagrant_host.vm.provision 'shell', inline: "grep -q \"add-registry ce-registry.usersys.redhat.com\" /etc/sysconfig/docker || echo \"ADD_REGISTRY='--add-registry ce-registry.usersys.redhat.com'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "grep -q \"insecure-registry ce-registry.usersys.redhat.com\" /etc/sysconfig/docker || echo \"INSECURE_REGISTRY='--insecure-registry ce-registry.usersys.redhat.com'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "grep -q \"H tcp://127.0.0.1:2375\" /etc/sysconfig/docker || echo \"DOCKER_NETWORK_OPTIONS='-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl restart docker"

    # The internal DNS in boston lab points to an unsecure registry which causes issues. Add ing a fixed entry in /etc/hosts as a workaround
    vagrant_host.vm.provision 'shell', inline: "grep -q \"registry.access.redhat.com\" /etc/hosts || echo '209.132.182.63 registry.access.redhat.com' | sudo tee --append /etc/hosts > /dev/null"

    # Bring up the registry pods inside Kubernetes and expose ports to bare metal
    # Create the store, and fix the SE Linux policy to allow the docker container to be able to access it
    vagrant_host.vm.provision 'shell', inline: "mkdir -p /home/vagrant/store/repositories && sudo chcon -Rt svirt_sandbox_file_t /home/vagrant/store/"
    # Add the pod
    vagrant_host.vm.provision 'shell', inline: "/usr/bin/kubectl get pods | grep -q registry || /usr/bin/kubectl create -f /mnt/vagrant/instructor.json"


    config.vm.network "forwarded_port", guest: 5000, host: 5000, host_ip: "0.0.0.0"
    config.vm.network "forwarded_port", guest: 5001, host: 5001, host_ip: "0.0.0.0"
    config.vm.network "forwarded_port", guest: 8081, host: 8081, host_ip: "0.0.0.0", auto_correct: true
    config.vm.network "forwarded_port", guest: 80, host: 80, host_ip: "0.0.0.0", auto_correct: true

    # END
  end
end
