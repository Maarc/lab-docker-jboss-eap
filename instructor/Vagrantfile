# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure('2') do |config|
  # it is important that the name of this box is "default"
  config.vm.define :default do |vagrant_host|
    # Box name
    vagrant_host.vm.box = 'rhel-atomic-7'
    vagrant_host.vm.hostname = "rhel-atomic-7-docker-host"

    config.vm.provider "virtualbox" do |virtualbox|
      virtualbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
      virtualbox.memory = 2048
    end

    config.vm.provider :libvirt do |libvirt|
      libvirt.memory = 8192
      libvirt.cpus = 4
    end

    config.vm.synced_folder './', '/vagrant', type: 'rsync', disabled: true
    config.vm.synced_folder './', '/mnt/vagrant', type: 'rsync'
    config.vm.synced_folder '../', '/mnt/lab', type: 'rsync'
    config.nfs.functional = false

    vagrant_host.vm.provision 'shell', inline: "sudo systemctl stop docker > /dev/null 2>&1 || :" #in case this isn't first run
    vagrant_host.vm.provision 'shell', inline: "sudo groupadd docker > /dev/null 2>&1 || : "
    vagrant_host.vm.provision 'shell', inline: "sudo usermod -a -G docker vagrant"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"
    vagrant_host.vm.provision 'shell', inline: "sudo chown root:docker /var/run/docker.sock"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl start docker"

    # Lab Registry additions (to CDK)
    
    # Enable RH Software Collections, so we can yum install things like maven
    vagrant_host.vm.provision 'shell', inline: "sudo subscription-manager repos --enable rhel-server-rhscl-7-rpms"
    
    # start Kubernetes
    vagrant_host.vm.provision 'shell', inline: "sudo sed -i \"s/allow_privileged=false/allow_privileged=true/g\" /etc/kubernetes/config"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable etcd && sudo systemctl start etcd"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-apiserver && sudo systemctl start kube-apiserver"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-controller-manager && sudo systemctl start kube-controller-manager"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-scheduler && sudo systemctl start kube-scheduler"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kube-proxy.service && sudo systemctl start kube-proxy.service"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable kubelet.service && sudo systemctl start kubelet.service"

    # allow access to CE (Kev's team) repo, to pull registry-ui
    vagrant_host.vm.provision 'shell', inline: "grep -q \"add-registry ce-registry.usersys.redhat.com\" /etc/sysconfig/docker || echo \"ADD_REGISTRY='--add-registry ce-registry.usersys.redhat.com'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "grep -q \"insecure-registry ce-registry.usersys.redhat.com\" /etc/sysconfig/docker || echo \"INSECURE_REGISTRY='--insecure-registry ce-registry.usersys.redhat.com'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "grep -q \"H tcp://127.0.0.1:2375\" /etc/sysconfig/docker || echo \"DOCKER_NETWORK_OPTIONS='-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock'\" | sudo tee --append /etc/sysconfig/docker > /dev/null"
    vagrant_host.vm.provision 'shell', inline: "sudo systemctl enable docker && sudo systemctl restart docker"

    # The internal DNS in boston lab points to an unsecure registry which causes issues. Add ing a fixed entry in /etc/hosts as a workaround
    vagrant_host.vm.provision 'shell', inline: "grep -q \"registry.access.redhat.com\" /etc/hosts || echo '209.132.182.63 registry.access.redhat.com' | sudo tee --append /etc/hosts > /dev/null"

    # The internal DNS doesn't always work. Adding cd-registry manually
    vagrant_host.vm.provision 'shell', inline: "grep -q \"ce-registry.usersys.redhat.com\" /etc/hosts || echo '10.34.75.114 ce-registry.usersys.redhat.com' | sudo tee --append /etc/hosts > /dev/null"

    # Create the store directory
    vagrant_host.vm.provision 'shell', inline: "mkdir -p /home/vagrant/store && sudo chcon -Rt svirt_sandbox_file_t /home/vagrant/store"

    # Bring up the registry pods inside Kubernetes and expose ports to bare metal
    # Create the store, and fix the SE Linux policy to allow the docker container to be able to access it
    vagrant_host.vm.provision 'shell', inline: "mkdir -p /home/vagrant/store/registry/repositories && sudo chcon -Rt svirt_sandbox_file_t /home/vagrant/store/registry"
    # Add the pods
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/registry.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/registry.json"
    
    # Bring up the www and nexus pods inside Kubernetes and expose the ports to bare metal
    # Create the store, and fix the SE Linux policy to allow the docker container to be able to access it
    vagrant_host.vm.provision 'shell', inline: "mkdir -p /home/vagrant/store/nexus && sudo chcon -Rt svirt_sandbox_file_t /home/vagrant/store/nexus && sudo chmod a+rw /home/vagrant/store/nexus"

    # Build the docker images
    vagrant_host.vm.provision 'shell', inline: "docker build -t instructor/www /mnt/vagrant/www"
    vagrant_host.vm.provision 'shell', inline: "docker build -t instructor/nexus /mnt/vagrant/nexus"
    vagrant_host.vm.provision 'shell', inline: "docker build -t instructor/nexus-populate /mnt/vagrant/nexus-populate"
    
    # Create the store, and fix the SE Linux policy to allow the docker container to be able to access it
    vagrant_host.vm.provision 'shell', inline: "mkdir -p /home/vagrant/store/htdocs && sudo chcon -Rt svirt_sandbox_file_t /home/vagrant/store/htdocs"
    # Bring up the pods and services
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/www.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/www.json"
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/www-service.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/www-service.json"
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/nexus-service.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/nexus-service.json"
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/nexus.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/nexus.json"
    vagrant_host.vm.provision 'shell', inline: "cat /mnt/vagrant/nexus-populate.json | /usr/bin/kubectl delete -f - && /usr/bin/kubectl create -f /mnt/vagrant/nexus-populate.json"
    # Run the ticket-monster container to ensure that we have a local clone
    vagrant_host.vm.provision 'shell', inline: "docker build -t instructor/git-repos /mnt/vagrant/git-repos"
    # Create the store, and fix the SE Linux policy to allow the docker container to be able to access it
    vagrant_host.vm.provision 'shell', inline: "sudo chcon -Rt svirt_sandbox_file_t /mnt/lab"
    vagrant_host.vm.provision 'shell', inline: "docker run -v /home/vagrant/store:/mnt/store -v /mnt/lab:/mnt/lab -t instructor/git-repos"

    # Copy in the nice index.html file
    vagrant_host.vm.provision 'shell', inline: "sudo cp /mnt/vagrant/www/index.html /home/vagrant/store/htdocs"

    # Populate the registry with some images we are going to need
    vagrant_host.vm.provision 'shell', inline: "/mnt/vagrant/registry-populate.sh"

    config.vm.network "forwarded_port", guest: 5000, host: 5000, host_ip: "0.0.0.0"
    config.vm.network "forwarded_port", guest: 5001, host: 5001, host_ip: "0.0.0.0"
    config.vm.network "forwarded_port", guest: 5003, host: 5003, host_ip: "0.0.0.0"
    config.vm.network "forwarded_port", guest: 5002, host: 5002, host_ip: "0.0.0.0"

    # END
  end
end
